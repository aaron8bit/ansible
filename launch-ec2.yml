---
- hosts: localhost
  connection: local

  # LAUNCH SERVERS
  tasks:
    # This file defines the entire site architecture
    - include_vars: vars/xsite.yml

   # Launch the database first because it takes FOREVER
  #  - name: Launch Database (No Waiting)
  #    rds:
  #      region: "{{ project_region }}"
  #      subnet: "{{ aja_subnet_db_group }}"
  #      vpc_security_groups: "{{ aja_security_rds }}"
  #      command: create
  #      instance_name: "{{ aja_rds_instance }}"
  #      db_engine: MySQL
  #      size: 5
  #      instance_type: db.t2.micro
  #      db_name: "{{ aja_database_name }}"
  #      username: "{{ aja_database_user }}"
  #      password: "{{ aja_database_pass }}"
  #      wait: false
  #      ######################################################
  #      # RDS tags function in not in boto 2.20 that comes with
  #      # ubuntu 14, I think it was added in 2.26, working in 2.39
  #      #   pip install --upgrade --user boto
  #      ######################################################
  #      tags:
  #        Name: "{{ aja_rds_instance }}"
  #        Tier: database
  #        Project: aja

    - name: Launch EC2 Instances
      ec2:
         region: "{{ project_region }}"
         key_name: "{{ ec2_ssh_key_name }}"
         vpc_subnet_id: "{{ lookup('aws_subnet_ids_from_names', (project_region, item.subnet)) }}"
         group: "{{ item.groups }}"
         instance_type: t2.micro
         image: ami-8fcee4e5
         user_data: |
                    #!/bin/bash
                    sudo hostname {{ item.hostname }}.{{ item.domain }}
                    #sudo yum update -y
                    #sleep 10
                    #sudo shutdown -r now
         wait: true
         instance_tags: "{{ item.tags }}"
            #Name: "{{ app_instance1 }}"
            #Tier: application
            #Project: "{{ project_name }}"
      with_items: "{{ instance_list }}"
      register: newinstances
    #- debug: msg="{{ newinstances }}"
    #- debug: msg="{{ newinstances.results[0].instances[0].id }}"

    - name: Create/Assign EIPs to EC2 Instances
      ec2_eip:
        region: "{{ project_region }}"
        device_id: "{{ item.instances[0].id }}"
        in_vpc: yes
        reuse_existing_ip_allowed: yes
        state: present
      with_items: "{{ newinstances.results }}"
      register: newinstances_eips
    - debug: msg="{{ newinstances_eips }}"

    - name: Register New EIP in Route53
      route53:
        command: create
        zone: "{{ item.0.domain }}"
        record: "{{ item.0.hostname }}.{{ item.0.domain }}"
        type: A
        value: "{{ item.1.public_ip }}"
        overwrite: yes
      with_together:
        - "{{ instance_list }}"
        - "{{ newinstances_eips.results }}"
      register: route53out
    - debug: msg="{{ route53out }}"

# THIS WAS TEST CODE, IT WORKS
#    - name: Wait for SSH Available
#      become: false
#      local_action: wait_for host={{ app_instance1_hostname }}.{{ app_instance1_domain }}
#                    port=22 state=started delay=5 timeout=300

    # - name: Launch Application Server 2
    #   ec2:
    #      region: "{{ project_region }}"
    #      key_name: "{{ aja_key_name }}"
    #      vpc_subnet_id: "{{ aja_subnet_app }}"
    #      group: "{{ aja_security_app }}"
    #      instance_type: t2.micro
    #      image: ami-8fcee4e5
    #      user_data: |
    #                 #!/bin/bash
    #                 sudo yum update -y
    #                 sleep 10
    #                 sudo shutdown -r now
    #      wait: true
    #      instance_tags:
    #         Name: "{{ aja_app_instance2 }}"
    #         Tier: application
    #         Project: aja
    #   register: ec2
    #
    # # <sigh> I hate that I can't make this work dynamically
    # - name: Hard Assign EIP to App Server 2
    #   ec2_eip:
    #     region: "{{ project_region }}"
    #     device_id: "{{ item.id }}"
    #     ip: "{{ aja_app_instance_eip2 }}"
    #   with_items: "{{ ec2.instances }}"
    #
    # - name: Launch Loadbalancer
    #   ec2:
    #      region: "{{ project_region }}"
    #      key_name: "{{ aja_key_name }}"
    #      vpc_subnet_id: "{{ aja_subnet_dmz }}"
    #      group: "{{ aja_security_dmz }}"
    #      instance_type: t2.micro
    #      image: ami-8fcee4e5
    #      user_data: |
    #                 #!/bin/bash
    #                 sudo yum update -y
    #                 sleep 10
    #                 sudo shutdown -r now
    #      wait: true
    #      instance_tags:
    #         Name: "{{ aja_lb_instance }}"
    #         Tier: loadbalancer
    #         Project: aja
    #   register: ec2
    #
    # # <sigh> I hate that I can't make this work dynamically
    # - name: Hard Assign EIP to Loadbalancer
    #   ec2_eip:
    #     region: "{{ project_region }}"
    #     device_id: "{{ item.id }}"
    #     ip: "{{ aja_lb_instance_eip }}"
    #   with_items: "{{ ec2.instances }}"
    #   #with_items:
    #   #  - "{{ ec2.results }}"
    #   #  - "{{ aja_lb_instances_eips }}"
    #
    # - name: Waiting for Database to be Available - THIS CAN TAKE UP TO 10 MINUTES
    #   local_action: rds command=facts region="{{ project_region }}"
    #                 instance_name="{{ aja_rds_instance }}"
    #   register: rds
    # #- debug: var=rds
    #   until: rds.instance.status == "available"
    #   retries: 30
    #   delay: 60
    #
    # - name: Get Database Info
    #   local_action: rds command=facts region="{{ project_region }}"
    #                 instance_name="{{ aja_rds_instance }}"
    #   register: rds
    #
    # #######################################################
    # # There is a bug in boto 2.20 included with ubuntu
    # # had to upgrade to 2.39 before this would work
    # #   pip install --upgrade --user boto
    # #######################################################
    # - name: Register Database CNAME in Route53
    #   route53:
    #     command: create
    #     zone: exscrument.com
    #     record: db01.exscrument.com
    #     type: CNAME
    #     value: "{{ rds.instance.endpoint }}"
    #     overwrite: yes
